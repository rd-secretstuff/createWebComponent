{"version":3,"sources":["unknown"],"names":["createQuickAccess","dashesToCamelCase","camelCaseToDashes","createShadowDOM","p_ComponentInstance","p_ComponentTemplate","templateInstance","window","webComponentTemplates","get","ShadyCSS","prepareTemplate","styleElement","shadowRoot","attachShadow","mode","appendChild","content","cloneNode","ensureQuickAccess","$","$$","p_Selector","querySelector","$$$","Array","from","querySelectorAll","handleConnected","p_Properties","_properties","Object","keys","forEach","p_PropertyKey","property","attributeName","defineProperty","set","p_Value","oldValue","toAttribute","type","p_ConvertValue","JSON","stringify","Boolean","Number","toString","String","observer","console","warn","constructor","is","reflectToAttribute","setAttribute","removeAttribute","userInitialized","hasAttribute","getAttribute","parse","value","base","webComponentBaseClass","HTMLElement","template","properties","observedAttributes","map","p_Name","assert","eventHandlers","log","connectedCallback","attached","onAttached","p_Callback","disconnectedCallback","detached","onDetached","p_Handler","element","removeEventListener","event","handler","attributeChangedCallback","p_Attribute","p_OldValue","p_NewValue","propertyName","addAutoEventListener","p_Element","p_EventName","find","push","addEventListener","removeAutoEventListener","eventIndex","findIndex","splice","refreshQuickAccess"],"mappings":"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","sourcesContent":["import { createQuickAccess, dashesToCamelCase, camelCaseToDashes } from './tools.js';\n\n/**\n * Create the shadow DOM and attach it to the given web component instance\n * @param {HTMLElement} p_ComponentInstance The web component instance to which we are attaching the shadow DOM\n * @param {string} p_ComponentTemplate The name of the web component template\n */\nfunction createShadowDOM(p_ComponentInstance, p_ComponentTemplate) {\n\tconst templateInstance = window.webComponentTemplates.get(p_ComponentTemplate);\n\t// if we are using the shadyCSS polyfill, we must initialize that now\n\tif (window.ShadyCSS) {\n\t\twindow.ShadyCSS.prepareTemplate(templateInstance, p_ComponentTemplate);\n\t\twindow.ShadyCSS.styleElement(p_ComponentInstance);\n\t}\n\n\t// create the shadow DOM root here\n\tconst shadowRoot = p_ComponentInstance.attachShadow({ mode: 'open' });\n\tshadowRoot.appendChild(templateInstance.content.cloneNode(true));\n}\n\n/**\n * Create quick access members for this component. This function will add the possibility to access child elements that have an id, through\n * the $ member, it also allows to do a querySelector on the shadow dom through the $$ function and it will ass querySelectorAll through the $$$ function\n * The $$$ function will return the child members as an array and not as an node list\n * @param {HTMLElement} p_ComponentInstance The component for which we are creating the quick access members\n */\nfunction ensureQuickAccess(p_ComponentInstance) {\n\tif (!p_ComponentInstance.$) { // make sure we didn't do this already\n\t\tp_ComponentInstance.$ = createQuickAccess(p_ComponentInstance.shadowRoot, 'id');\n\t\tp_ComponentInstance.$$ = (p_Selector) => p_ComponentInstance.shadowRoot.querySelector(p_Selector);\n\t\tp_ComponentInstance.$$$ = (p_Selector) => Array.from(p_ComponentInstance.shadowRoot.querySelectorAll(p_Selector));\n\t}\n}\n\n/**\n * Initialize the web component after it has been added to the DOM\n * @param {HTMLElement} p_ComponentInstance The component instance we are initializing\n * @param {object} p_Properties The object that contains any web component specific properties\n */\nfunction handleConnected(p_ComponentInstance, p_Properties) {\n\tensureQuickAccess(p_ComponentInstance);\n\tif (p_Properties) {\n\t\tp_ComponentInstance._properties = {};\n\t\tObject.keys(p_Properties).forEach((p_PropertyKey) => {\n\t\t\tconst property = p_Properties[p_PropertyKey];\n\t\t\tconst attributeName = camelCaseToDashes(p_PropertyKey);\n\n\t\t\tObject.defineProperty(p_ComponentInstance, p_PropertyKey, {\n\t\t\t\tget() { return p_ComponentInstance._properties[p_PropertyKey]; },\n\t\t\t\tset(p_Value) {\n\t\t\t\t\tconst oldValue = p_ComponentInstance._properties[p_PropertyKey];\n\t\t\t\t\tlet toAttribute = () => '';\n\t\t\t\t\tswitch (property.type) {\n\t\t\t\t\t\tcase Array: p_ComponentInstance._properties[p_PropertyKey] = p_Value; toAttribute = (p_ConvertValue) => JSON.stringify(p_ConvertValue); break;\n\t\t\t\t\t\tcase Boolean: p_ComponentInstance._properties[p_PropertyKey] = p_Value && p_Value !== 'false'; toAttribute = () => ''; break;\n\t\t\t\t\t\tcase Number: p_ComponentInstance._properties[p_PropertyKey] = Number(p_Value) || 0; toAttribute = (p_ConvertValue) => p_ConvertValue.toString(); break;\n\t\t\t\t\t\tcase Object: p_ComponentInstance._properties[p_PropertyKey] = p_Value; toAttribute = (p_ConvertValue) => JSON.stringify(p_ConvertValue); break;\n\t\t\t\t\t\tcase String: p_ComponentInstance._properties[p_PropertyKey] = String(p_Value) || ''; toAttribute = (p_ConvertValue) => p_ConvertValue.toString(); break;\n\t\t\t\t\t}\n\t\t\t\t\tif (property.observer) {\n\t\t\t\t\t\tif (p_ComponentInstance[property.observer]) {\n\t\t\t\t\t\t\tif (oldValue !== p_ComponentInstance._properties[p_PropertyKey]) {\n\t\t\t\t\t\t\t\tp_ComponentInstance[property.observer](p_ComponentInstance._properties[p_PropertyKey], oldValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn(`The observer with the name: '${property.observer}' was not found inside the class for web component ${p_ComponentInstance.constructor.is}. Make sure that you added a public function with the name '${property.observer}' to the class.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (property.reflectToAttribute) {\n\t\t\t\t\t\tif (p_ComponentInstance._properties[p_PropertyKey]) {\n\t\t\t\t\t\t\tp_ComponentInstance.setAttribute(attributeName, toAttribute(p_ComponentInstance._properties[p_PropertyKey]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tp_ComponentInstance.removeAttribute(attributeName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\n\t\tObject.keys(p_Properties).forEach((p_PropertyKey) => {\n\t\t\tconst property = p_Properties[p_PropertyKey];\n\t\t\tlet userInitialized;\n\n\t\t\tif (p_ComponentInstance.hasAttribute(p_PropertyKey)) {\n\t\t\t\tuserInitialized = (property.type === Boolean) ? p_ComponentInstance.getAttribute(p_PropertyKey) !== 'false' : p_ComponentInstance.getAttribute(p_PropertyKey);\n\t\t\t}\n\n\t\t\tif (property.reflectToAttribute || p_ComponentInstance[p_PropertyKey] === undefined) {\n\t\t\t\t// use the user specified value if it was specified\n\t\t\t\tif (userInitialized) {\n\t\t\t\t\tswitch (property.type) {\n\t\t\t\t\t\tcase Array: p_ComponentInstance[p_PropertyKey] = JSON.parse(userInitialized); break;\n\t\t\t\t\t\tcase Boolean: p_ComponentInstance[p_PropertyKey] = userInitialized !== 'false'; break;\n\t\t\t\t\t\tcase Number: p_ComponentInstance[p_PropertyKey] = Number(userInitialized); break;\n\t\t\t\t\t\tcase Object: p_ComponentInstance[p_PropertyKey] = JSON.parse(userInitialized); break;\n\t\t\t\t\t\tcase String: p_ComponentInstance[p_PropertyKey] = String(userInitialized); break;\n\t\t\t\t\t}\n\t\t\t\t} else { // use the default value\n\t\t\t\t\tswitch (property.type) {\n\t\t\t\t\t\tcase Array: p_ComponentInstance[p_PropertyKey] = property.value || []; break;\n\t\t\t\t\t\tcase Boolean: p_ComponentInstance[p_PropertyKey] = property.value || false; break;\n\t\t\t\t\t\tcase Number: p_ComponentInstance[p_PropertyKey] = property.value || 0; break;\n\t\t\t\t\t\tcase Object: p_ComponentInstance[p_PropertyKey] = property.value || {}; break;\n\t\t\t\t\t\tcase String: p_ComponentInstance[p_PropertyKey] = property.value || ''; break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst base = 'web-component-base-element';\n\nexport class webComponentBaseClass extends HTMLElement {\n\t/**\n\t * Get the name for the web component. Derived classes must override this\n\t * @returns {string} The name of this web component\n\t */\n\tstatic get is() { return base; }\n\t/**\n\t * Get the name for the template. In general this should be the same as the is value\n\t * @returns {string} The name of the template to be used with the web component\n\t */\n\tstatic get template() { return this.is; }\n\t/**\n\t * Get the properties for this web component. Derived classes can ovverride this if they want to provide properties. By default there are no properties\n\t * @returns {object} The properties object\n\t */\n\tstatic get properties() { return {}; }\n\t/**\n\t * Get an array containing all attributes that have an observer attached\n\t * @returns {array} Array containing all attributes that have an observer\n\t */\n\tstatic get observedAttributes() { return (this.properties) ? Object.keys(this.properties).map((p_Name) => camelCaseToDashes(p_Name)) : []; }\n\n\t/**\n\t * Constructor for this base class\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tconsole.assert(this.constructor.is !== base, 'Error, make sure that the web component implements: statis get is() { return \"name-of-your-web-component\"; }');\n\t\tcreateShadowDOM(this, this.constructor.template, this.constructor.properties);\n\t\tthis.eventHandlers = [];\n\t\tconsole.log(this.constructor.observedAttributes);\n\t}\n\n\t/**\n\t * Called by the syste,m when the web component has been added to the DOM\n\t */\n\tconnectedCallback() {\n\t\thandleConnected(this, this.constructor.properties);\n\t\t// this function should be implemented INSIDE the derrived cass, if you want to do additional initializiation after the component gets attached to the DOM\n\t\tif (this.attached) {\n\t\t\tthis.attached();\n\t\t}\n\t\t// this function should be implemented OUTSIDE the derrived cass, if you want to do additional initializiation after the component gets attached to the DOM\n\t\tif (this.onAttached) {\n\t\t\tthis.onAttached();\n\t\t}\n\n\t\t// setter to set the onAttached function, this setter only exist after the component has been attached\n\t\tObject.defineProperty(this, 'onAttached', {\n\t\t\tget() { return undefined; },\n\t\t\tset(p_Callback) { p_Callback(); },\n\t\t});\n\t}\n\n\t/**\n\t * Called by the system when the web component has been removed from the DOM\n\t */\n\tdisconnectedCallback() {\n\t\t// this function should be implemented INSIDE the derrived class when needed to handle the component being removed from the DOM\n\t\tif (this.detached) {\n\t\t\tthis.detached();\n\t\t}\n\t\t// this function can be implemented OUTSIDE of the derived class, if you want to be notified if the component has been removed from the DOM\n\t\tif (this.onDetached) {\n\t\t\tthis.onDetached();\n\t\t}\n\t\t// remove any auto event handler that was added\n\t\tthis.eventHandlers.forEach((p_Handler) => { p_Handler.element.removeEventListener(p_Handler.event, p_Handler.handler); });\n\t}\n\n\t/**\n\t * Called by the system if an attribute value is changed\n\t * @param {string} p_Attribute The name of the attribute that is changed\n\t * @param {*} p_OldValue The old value for the attribute\n\t * @param {*} p_NewValue The new value for the attribute\n\t */\n\tattributeChangedCallback(p_Attribute, p_OldValue, p_NewValue) {\n\t\tconst propertyName = dashesToCamelCase(p_Attribute);\n\t\tensureQuickAccess(this);\n\t\t// boolean are handled differently because the absence of the value also means fale and the precense of the value also means true\n\t\tif (this.constructor.properties[propertyName] && this.constructor.properties[propertyName].type === Boolean) {\n\t\t\tp_OldValue = (p_OldValue === '' || p_OldValue !== 'false');\n\t\t\tp_NewValue = (p_NewValue === '' || p_NewValue !== 'false');\n\t\t}\n\t\t// we set our variable and the setter will handle the rest\n\t\tif (p_OldValue !== p_NewValue && this.hasAttribute(p_Attribute)) {\n\t\t\tthis[propertyName] = p_NewValue;\n\t\t}\n\t}\n\n\t/**\n\t * Attach an event handler to the given element. This function will automatically clean all event handlers when the web component gets removed from the DOM\n\t * @param {HTMLElement} p_Element The element to which we are attaching the event handler\n\t * @param {string} p_EventName The name of the event (e.g. click, mousedown etc)\n\t * @param {function} p_Callback The handler function to be called for the event\n\t */\n\taddAutoEventListener(p_Element, p_EventName, p_Callback) {\n\t\tif (!this.eventHandlers.find((p_Handler) => p_Handler.element === p_Element && p_Handler.event === p_EventName && p_Handler.handler === p_Callback)) {\n\t\t\tthis.eventHandlers.push({ element: p_Element, event: p_EventName, handler: p_Callback });\n\t\t\tp_Element.addEventListener(p_EventName, p_Callback);\n\t\t}\n\t}\n\n\t/**\n\t * Remove an event handler that was previously attached by a call to addAutoEventListener\n\t * @param {HTMLElement} p_Element The element from which the event will be removed\n\t * @param {string} p_EventName The name of the event to remove\n\t * @param {function} p_Callback The callback that was previously added for the event\n\t */\n\tremoveAutoEventListener(p_Element, p_EventName, p_Callback) {\n\t\tconst eventIndex = this.eventHandlers.findIndex((p_Handler) => p_Handler.element === p_Element && p_Handler.event === p_EventName && p_Handler.handler === p_Callback);\n\t\tif (eventIndex !== -1) {\n\t\t\tthis.eventHandlers.splice(eventIndex, 1);\n\t\t\tp_Element.removeEventListener(p_EventName, p_Callback);\n\t\t}\n\t}\n\n\t/**\n\t * recreate the quick access object using the current content of the shadow dom\n\t * use this when you manually add or remove items from the DOM\n\t */\n\trefreshQuickAccess() {\n\t\tthis.$ = createQuickAccess(this.shadowRoot, 'id');\n\t}\n}\n"]}